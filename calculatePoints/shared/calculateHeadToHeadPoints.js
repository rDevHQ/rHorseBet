/**
 * Ber칛knar relativ Head-to-Head (H2H) po칛ng f칬r en h칛st baserat p친 dess placeringar i lopp j칛mf칬rt med
 * 칬vriga konkurrenter som deltagit i samma lopp.
 *
 * Po칛ngen f칬r varje m칬te (gemensamt lopp) viktas med motst친ndarens bettingpo칛ng, vilket ger h칬gre
 * vikt 친t m칬ten mot starkare motst친ndare enligt spelarnas insatser.
 *
 * Vid vinst ger po칛ngen h칬gre v칛rde ju h칬gre motst친ndarens bettingpo칛ng 칛r.
 * Vid f칬rlust viktas po칛ngen inverterat, dvs en f칬rlust mot en svag h칛st ger st칬rre minuspo칛ng
 * 칛n mot en stark h칛st.
 *
 * Summan av viktade m칬tespo칛ng normaliseras sedan till en skala mellan 1 och 100 baserat p친 min- och maxpo칛ng
 * i hela startf칛ltet f칬r att skapa en r칛ttvis j칛mf칬relse mellan h칛star.
 *
 * Funktionen returnerar b친de den normaliserade po칛ngen och en lista med detaljerade m칬tesresultat
 * inklusive resultat per m칬te och viktad po칛ng.
 *
 * @param {Array} lastTenStarts - H칛stens senaste starter med placeringar och lopp-ID.
 * @param {Array} allHorses - Lista med alla h칛star i loppet, inklusive deras starter och bettingpo칛ng.
 * @param {string} horseName - Namnet p친 h칛sten som po칛ngen ska ber칛knas f칬r.
 * @param {number} [unplacedValue=10] - V칛rde som anv칛nds f칬r ogiltiga eller oplacerade starter (default 10).
 * @returns {Object} Objekt med normaliserad po칛ng (1-100) och lista 칬ver m칬ten med detaljer.
 */
export function calculateHeadToHeadPoints(lastTenStarts, allHorses, horseName, unplacedValue = 10) {
    const meetings = [];

    function calculateRawH2HPoints(targetHorseLastTenStarts, targetHorseName, collectMeetings = false) {
        let totalPoints = 0;

        targetHorseLastTenStarts?.forEach(start => {
            if (!start || start.position === "N/A") return;

            const raceId = start.raceId;
            const horseRawPosition = parseInt(start.position);
            const horsePosition = horseRawPosition === 0 ? unplacedValue : horseRawPosition;

            allHorses.forEach(opponent => {
                if (!opponent.lastTenStarts || !Array.isArray(opponent.lastTenStarts)) return;
                if (opponent.horse.name === targetHorseName) return;

                const opponentRace = opponent.lastTenStarts.find(s => s.raceId === raceId);
                if (opponentRace && opponentRace.position !== "N/A") {
                    const opponentRawPosition = parseInt(opponentRace.position);
                    const opponentPosition = opponentRawPosition === 0 ? unplacedValue : opponentRawPosition;

                    const diff = horsePosition - opponentPosition;
                    const opponentBettingPoints = opponent.bettingPercentagePoints || 1; // Undvik 0 vid division

                    let weightedPoints = 0;

                    if (diff < 0) {
                        // Vinst mot motst친ndare: viktas med motst친ndarens bettingpo칛ng (starkare motst친nd ger h칬gre po칛ng)
                        weightedPoints = Math.abs(diff) * opponentBettingPoints;
                        totalPoints += weightedPoints;
                    } else if (diff > 0) {
                        // F칬rlust mot motst친ndare: viktas inverterat, dvs f칬rlust mot svag motst친ndare ger st칬rre minuspo칛ng
                        weightedPoints = -Math.abs(diff) * (100 - opponentBettingPoints);
                        totalPoints += weightedPoints;
                    }

                    if (collectMeetings) {
                        const meeting = {
                            opponent: opponent.horse.name,
                            raceId,
                            selfPosition: horsePosition,
                            opponentPosition,
                            opponentBettingPoints,
                            weightedPoints,
                            diff,
                            result: diff < 0 ? 'Vinst' : diff > 0 ? 'F칬rlust' : 'Oavgjort'
                        };
                        meetings.push(meeting);

                    //    console.log(`游냢 ${targetHorseName} Meeting: ${meeting.opponent}, ${meeting.result}, Diff: ${meeting.diff}, BP: ${meeting.opponentBettingPoints}, Total: ${meeting.weightedPoints} `);
                    }
                }
            });
        });

        return totalPoints;
    }

    // Ber칛kna po칛ngen f칬r aktuell h칛st och samla m칬ten
    const horseRaw = calculateRawH2HPoints(lastTenStarts, horseName, true);

    // Ber칛kna r친po칛ng f칬r alla andra h칛star (utan att samla m칬ten)
    const rawValues = allHorses
        .filter(h => h.horse?.name !== horseName)
        .map(h => calculateRawH2HPoints(h.lastTenStarts, h.horse.name))
        .concat(horseRaw);

    const minRaw = Math.min(...rawValues);
    const maxRaw = Math.max(...rawValues);

    if (maxRaw === minRaw) {
        return {
            points: 50,
            meetings
        };
    }

    const normalized = (horseRaw - minRaw) / (maxRaw - minRaw);
    const scaledPoints = Math.round(normalized * 99 + 1);

    return {
        points: scaledPoints,
        meetings
    };
}
import { MAX_CATEGORY_POINTS } from './pointsConfig.js';

/**
 * BerÃ¤knar startspÃ¥rspoÃ¤ng baserat pÃ¥ startmetod och spÃ¥rnummer.
 * PoÃ¤ngen speglar historisk segerprocent fÃ¶r varje spÃ¥r i Sverige,
 * och skalas enligt START_POSITION_POINTS.MAX_POINTS.
 *
 * ðŸ“Š Statistik â€“ Autostart (auto):
 * SpÃ¥r  1â€“3  â†’ ~12â€“14% vinstchans â†’ +100% av max
 * SpÃ¥r  4â€“6  â†’ ~10â€“12%            â†’ +70%
 * SpÃ¥r  7â€“8  â†’ ~6â€“8%              â†’ +40%
 * SpÃ¥r    9  â†’ ~4â€“6%              â†’ +20%
 * SpÃ¥r 10â€“12 â†’ ~2â€“4%              â†’ 0%
 * SpÃ¥r 13â€“15 â†’ ~1â€“2%              â†’ âˆ’50%
 *
 * ðŸ“Š Statistik â€“ Voltestart (volte):
 * SpÃ¥r  1â€“3,5â€“6 â†’ ~10â€“14%         â†’ +100%
 * SpÃ¥r  2       â†’ ~8â€“9%           â†’ +100%
 * SpÃ¥r  4,7     â†’ ~6â€“8%           â†’ +70%
 * SpÃ¥r  8â€“9     â†’ ~4â€“6%           â†’ +40%
 * SpÃ¥r 10â€“12    â†’ ~2â€“4%           â†’ +10%
 * SpÃ¥r 13â€“15    â†’ ~1â€“2%           â†’ âˆ’50%
 */

/**
 * Relativ poÃ¤ngsÃ¤ttning baserat pÃ¥ startspÃ¥r jÃ¤mfÃ¶rt med Ã¶vriga fÃ¤ltet.
 * HÃ¤sten med bÃ¤st spÃ¥r i fÃ¤ltet fÃ¥r MAX_CATEGORY_POINTS.startspar,
 * den med sÃ¤mst spÃ¥r fÃ¥r 0.
 */
export function calculateStartPositionPoints(start, raceHorses, startMethod) {
    const maxPoints = MAX_CATEGORY_POINTS.startspar;

    // Absoluta spÃ¥rvÃ¤rden enligt historik
    function getRawScore(method, number) {
        if (method === "volte") {
            if ([1, 2, 3, 5, 6].includes(number)) return 10;
            if ([4, 7].includes(number)) return 7;
            if ([8, 9].includes(number)) return 4;
            if ([10, 11, 12].includes(number)) return 1;
            if ([13, 14, 15].includes(number)) return -3;
        } else if (method === "auto") {
            if ([1, 2, 3].includes(number)) return 10;
            if ([4, 5, 6].includes(number)) return 7;
            if ([7, 8].includes(number)) return 4;
            if (number === 9) return 2;
            if ([10, 11, 12].includes(number)) return 0;
            if ([13, 14, 15].includes(number)) return -3;
        }
        return 0;
    }

    // HÃ¤mta rÃ¥vÃ¤rden fÃ¶r alla hÃ¤star i loppet
    const allScores = raceHorses.map(h => ({
        name: h.horse.name,
        score: getRawScore(startMethod, h.startNumber)
    }));

    const min = Math.min(...allScores.map(s => s.score));
    const max = Math.max(...allScores.map(s => s.score));

    const thisHorseScore = getRawScore(startMethod, start.startNumber);

    if (max === min) {
        return Math.round(maxPoints / 2);
    }

    const normalized = ((thisHorseScore - min) / (max - min)) * maxPoints;
    return Math.round(normalized);
}